<!-- Plugin configuration --> 
<build> 
<finalName>one</finalName> 
<!-- Feel free to change maven-compiler-plugin configuration --> 
<plugins> 
<plugin> 
<groupId>org.apache.maven.plugins</groupId> 
<artifactId>maven-compiler-plugin</artifactId> 
<configuration> 
<fork>true</fork> 
<compilerVersion>1.6</compilerVersion> 
<executable>${JAVA_HOME}\bin\javac</executable> 
<source>1.7</source> 
<target>1.7</target> 
</configuration> 
</plugin> 
<plugin> 
<groupId>org.codehaus.mojo</groupId> 
<artifactId>tomcat-maven-plugin</artifactId> 
<version>1.0</version> 
<configuration> 
<port>8080</port> 
<path>/${project.build.finalName}</path> 
<warFile>${project.basedir}/target/${project.build.finalName}.war</warFile> 
</configuration> 
</plugin> 
<plugin> 
<artifactId>maven-pmd-plugin</artifactId> 
<configuration> 
<!--<excludes> 
<exclude>com/wd/**/*.java</exclude> 
</excludes>--> 
</configuration> 
</plugin> 
<plugin> 
<groupId>org.codehaus.mojo</groupId> 
<artifactId>findbugs-maven-plugin</artifactId> 
<version>2.3.1</version> 
<configuration> 
<onlyAnalyze>com.wd.ne.api.chargeaccount.*</onlyAnalyze> 
</configuration> 
</plugin> 
<plugin> 
<artifactId>maven-surefire-plugin</artifactId> 
<configuration> 
<forkMode>always</forkMode> 
<argLine>-XX:MaxPermSize=512m</argLine> 
<skipTests>false</skipTests> 
<includes> 
<include>com/wd/ne/api/levelnentitlement/service/**/*.java</include> 
</includes> 
</configuration> 
</plugin> 
<plugin> 
<groupId>org.codehaus.mojo</groupId> 
<artifactId>cobertura-maven-plugin</artifactId> 
<configuration> 
<instrumentation> 
<includes> 
<include>com/wd/ne/api/levelnentitlement/service/**/*.class</include> 
</includes> 
</instrumentation> 
</configuration> 
</plugin> 
<plugin> 
<groupId>org.apache.maven.plugins</groupId> 
<artifactId>maven-checkstyle-plugin</artifactId> 
<configuration> 
    <!-- <excludes> 
com/wdpr/**/*.java 
</excludes> --> 
</configuration> 
</plugin> 
<plugin> 
<groupId>org.codehaus.mojo</groupId> 
<artifactId>javancss-maven-plugin</artifactId> 
<configuration> 
<!--<excludes> 
<exclude>**/LevelNEntitlementServiceImplBase.java</exclude> 
<exclude>**/LevelNEntitlementServiceImpl.java</exclude> 
</excludes>--> 
</configuration> 
</plugin> 
</plugins> 
</build> 
 
 
 
if (!populateHasFutureEntitlement(managedGuestEntitlements, 
managedGuestXid)) { 
return populateGroupClassificationDetails(parentSwid, uriInfo, 
managedGuestXid); 
 
 
} else { 
throw new NgeServiceException("9346", HttpStatus.SC_CONFLICT, 
"Cannot delete Managed Guests because Managed Guest has entitlements" 
+ ExceptionUtil.getExceptionClassAndMethod( 
ManagedGuestServiceImpl.class, 
"deleteUnregisteredOwnedGuest")); 
 
 
} 
Implementation 
--------------- 
package com.wdpr.nge.api.exceptions; 
public class NgeServiceException extends Exception { 
 
 
    private static final long serialVersionUID = 7645163279806619421L; 
 
 
    private static final int DEFAULT_STATUS_CODE = 500; 
 
 
    private int status = DEFAULT_STATUS_CODE; 
    public static enum NgeServiceExceptionType { 
        /** 
         * Not Found Exception Type 
         */ 
        NOT_FOUND_EXCEPTION, 
        /** 
         * Bad Request Type 
         */ 
        BAD_REQUEST, 
        /** 
         * Internal Server Error 
         */ 
        INTERNAL_SERVER_ERROR, 
        /** 
         * 401 Unauthorized 
         */ 
        UNAUTHORIZED, 
        /** 
         * 403 Forbidden 
         */ 
        FORBIDDEN, 
        /** 
         * 409 Conflict 
         */ 
        CONFLICT, 
        /** 
         * 503 Service Unavailable 
         */ 
        SERVICE_UNAVAILABLE; 
 
 
        /** 
         *  
         */ 
 
 
    }; 
 
 
    private NgeServiceExceptionType ngeServiceExceptionType; 
 
 
    /** 
     * A serializable response entity 
     *  
     * @see javax.ws.rs.core.Response 
     */ 
    private Object entity; 
 
 
    /** 
     * Constructs a new NgeServiceException exception with <code>null</code> as 
     * its detail message. The cause is not initialized, and may subsequently be 
     * initialized by a call to {@link #initCause}. 
     */ 
    public NgeServiceException() { 
        super(); 
    } 
 
 
    /** 
     * Constructs a new NgeServiceException exception with <code>null</code> as 
     * its detail message. The cause is not initialized, and may subsequently be 
     * initialized by a call to {@link #initCause}. 
     *  
     * @param entity 
     *            the serializable entity that will be conveyed in the response 
     *            message 
     */ 
    public NgeServiceException(final Object entity) { 
        this(); 
        this.entity = entity; 
    } 
 
 
    /** 
     * Constructs a new NgeServiceException exception with the specified detail 
     * message. The cause is not initialized, and may subsequently be 
     * initialized by a call to {@link #initCause}. 
     *  
     * @param message 
     *            the detail message. The detail message is saved for later 
     *            retrieval by the {@link #getMessage()} method. 
     */ 
    public NgeServiceException(final String message) { 
        super(message); 
        this.entity = message; 
    } 
 
 
    /** 
     * Constructs a new NgeServiceException exception with the specified detail 
     * message and cause. 
     * <p> 
     * Note that the detail message associated with <code>cause</code> is 
     * <i>not</i> automatically incorporated in this NgeServiceException 
     * exception's detail message. 
     *  
     * @param message 
     *            the detail message (which is saved for later retrieval by the 
     *            {@link #getMessage()} method). 
     * @param cause 
     *            the cause (which is saved for later retrieval by the 
     *            {@link #getCause()} method). (A <tt>null</tt> value is 
     *            permitted, and indicates that the cause is nonexistent or 
     *            unknown.) 
     * @since 1.4 
     */ 
    public NgeServiceException(final String message, final Throwable cause) { 
        super(message, cause); 
    } 
 
 
    /** 
     * Constructs a new NgeServiceException exception with the specified cause 
     * and a detail message of <tt>(cause==null ? null : cause.toString())</tt> 
     * (which typically contains the class and detail message of <tt>cause</tt> 
     * ). This constructor is useful for NgeServiceException exceptions that are 
     * little more than wrappers for other throwables. 
     *  
     * @param cause 
     *            the cause (which is saved for later retrieval by the 
     *            {@link #getCause()} method). (A <tt>null</tt> value is 
     *            permitted, and indicates that the cause is nonexistent or 
     *            unknown.) 
     * @since 1.4 
     */ 
    public NgeServiceException(final Throwable cause) { 
        super(cause); 
    } 
 
 
    /** 
     * Constructs a new NgeServiceException exception with the specified cause 
     * and a detail message of <tt>(cause==null ? null : cause.toString())</tt> 
     * (which typically contains the class and detail message of <tt>cause</tt> 
     * ). This constructor is useful for NgeServiceException exceptions that are 
     * little more than wrappers for other throwables. Also initializes the 
     * serializable <tt>entity</tt> that will be expressed to the client as a 
     * message. 
     *  
     * @param cause 
     *            the cause (which is saved for later retrieval by the 
     *            {@link #getCause()} method). (A <tt>null</tt> value is 
     *            permitted, and indicates that the cause is nonexistent or 
     *            unknown.) 
     * @param entity 
     *            serializable response entity 
     * @since 1.4 
     */ 
    public NgeServiceException(final Throwable cause, final Object entity) { 
        this(cause); 
        this.entity = entity; 
    } 
 
 
    private String messageCode; 
 
 
/** 
* @return 
* messageCode 
*/ 
public String getMessageCode() { 
return messageCode; 
} 
 
 
/** 
* @param messageCode 
* messageCode 
*/ 
public void setMessageCode(final String messageCode) { 
this.messageCode = messageCode; 
} 
 
 
/** 
* @param messageCode 
* messageCode 
* @param statusCode 
* the status code 
* @param message 
* the detail message (which is saved for later retrieval by the 
*       {@link #getMessage()} method). 
*/ 
public NgeServiceException(final String messageCode, final int statusCode, final String message) { 
super(message); 
this.status = statusCode; 
this.messageCode = messageCode; 
}  
 
 
    /** 
     * Constructs a new NgeServiceException exception with the specified details 
     * cause, ngeServiceExceptionType and message. 
     *  
     * @param cause 
     *            the cause of erro 
     * @param ngeServiceExceptionType 
     *            the exception type 
     * @param message 
     *            the error message 
     */ 
    public NgeServiceException(final Throwable cause, 
            final NgeServiceExceptionType ngeServiceExceptionType, 
            final String message) { 
        super(message, cause); 
        this.ngeServiceExceptionType = ngeServiceExceptionType; 
    } 
 
 
    /** 
     * Returns the serializable response entity 
     *  
     * @see javax.ws.rs.core.Response 
     * @return entity the object entity 
     */ 
    public Object getEntity() { 
        return entity; 
    } 
 
 
    /** 
     * A serializable response entity 
     *  
     * @see javax.ws.rs.core.Response 
     * @param entity 
     *            the object entity 
     */ 
    public void setEntity(final Object entity) { 
        this.entity = entity; 
    } 
 
 
    /** 
     * @return the status 
     */ 
    public int getStatus() { 
        return status; 
    } 
 
 
    /** 
     * @param status 
     *            the status to set 
     */ 
    public void setStatus(final int status) { 
        this.status = status; 
    } 
 
 
    /** 
     * @return the ngeServiceExceptionType 
     */ 
    public NgeServiceExceptionType getNgeServiceExceptionType() { 
        return ngeServiceExceptionType; 
    } 
} 
 
 
<!-- Dependency definitions --> 
<dependencies> 
<dependency> 
<groupId>org.apache.cxf</groupId> 
<artifactId>cxf-rt-databinding-jaxb</artifactId> 
</dependency> 
<dependency> 
<groupId>org.apache.cxf</groupId> 
<artifactId>cxf-bundle</artifactId> 
<version>2.4.2</version> 
</dependency> 
<dependency> 
<groupId>commons-lang</groupId> 
<artifactId>commons-lang</artifactId> 
<version>2.6</version> 
</dependency> 
<dependency> 
<groupId>org.apache.cxf</groupId> 
<artifactId>cxf-tools-common</artifactId> 
<version>2.4.2</version> 
</dependency> 
<dependency> 
<groupId>org.apache.abdera</groupId> 
<artifactId>abdera-core</artifactId> 
<version>1.1.2</version> 
</dependency> 
<dependency> 
<groupId>javax.servlet</groupId> 
<artifactId>servlet-api</artifactId> 
</dependency> 
<dependency> 
<groupId>org.easymock</groupId> 
<artifactId>easymock</artifactId> 
<scope>test</scope> 
</dependency> 
<dependency> 
<groupId>net.sf.json-lib</groupId> 
<artifactId>json-lib</artifactId> 
<version>2.2.3</version> 
<classifier>jdk15</classifier> 
</dependency> 
<dependency> 
<groupId>com.thoughtworks.xstream</groupId> 
<artifactId>xstream</artifactId> 
<version>1.3.1</version> 
</dependency> 
<dependency> 
<groupId>commons-httpclient</groupId> 
<artifactId>commons-httpclient</artifactId> 
</dependency> 
<dependency> 
<groupId>org.apache.commons</groupId> 
<artifactId>commons-io</artifactId> 
<version>1.3.2</version> 
<type>jar</type> 
<scope>compile</scope> 
</dependency> 
<dependency> 
<groupId>junit</groupId> 
<artifactId>junit</artifactId> 
<version>4.8.1</version> 
</dependency> 
<dependency> 
<groupId>org.powermock</groupId> 
<artifactId>powermock-module-junit4</artifactId> 
<version>1.4.8</version> 
<scope>test</scope> 
</dependency> 
<dependency> 
<groupId>org.powermock</groupId> 
<artifactId>powermock-api-easymock</artifactId> 
<version>1.4.8</version> 
<scope>test</scope> 
</dependency> 
 
 
<dependency> 
<groupId>com.bea.commonj</groupId> 
<artifactId>com.springsource.commonj</artifactId> 
<version>1.1.0</version> 
<scope>provided</scope> 
</dependency> 
 
 
<dependency> 
<groupId>de.myfoo.commonj</groupId> 
<artifactId>foo-commonj.commonj</artifactId> 
<version>1.1.0</version> 
<scope>provided</scope> 
</dependency> 
 
 
<!--oracle and tomcat jars--> 
<dependency> 
                <groupId>com.oracle</groupId> 
                <artifactId>ojdbc14</artifactId> 
                <version>10.2.0.2</version> 
</dependency> 
 
 
<dependency> 
                <groupId>org.apache.tomcat</groupId> 
                <artifactId>com.springsource.org.apache.tomcat.jdbc</artifactId> 
                <version>1.0.9.3</version>  
</dependency> 
<!-- Franklin Perez: Added so that XMLSerializer could be used! --> 
<dependency> 
<groupId>xom</groupId> 
<artifactId>xom</artifactId> 
<version>1.2.5</version> 
<type>jar</type> 
<scope>compile</scope> 
</dependency> 
 
 
<dependency> 
<groupId>org.apache.tomcat</groupId> 
<artifactId>tomcat-juli</artifactId> 
<version>7.0.0</version> 
<scope>test</scope> 
</dependency> 
 
 
<dependency> 
<groupId>org.apache.tomcat</groupId> 
<artifactId>catalina</artifactId> 
<version>6.0.35</version> 
<scope>test</scope> 
</dependency> 
 
 
<!-- end of Parallel Processing --> 
 
 
<!-- Spring Dependencies --> 
 
 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-context-support</artifactId> 
<version>3.0.5.RELEASE</version> 
<type>jar</type> 
<scope>compile</scope> 
 
 
</dependency> 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-context</artifactId> 
<version>3.0.5.RELEASE</version> 
<exclusions> 
<!-- Exclude Commons Logging in favor of SLF4j --> 
<exclusion> 
<groupId>commons-logging</groupId> 
<artifactId>commons-logging</artifactId> 
</exclusion> 
</exclusions> 
</dependency> 
 
 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-web</artifactId> 
<version>3.0.5.RELEASE</version> 
<exclusions> 
<!-- Exclude Commons Logging in favor of SLF4j --> 
<exclusion> 
<groupId>commons-logging</groupId> 
<artifactId>commons-logging</artifactId> 
</exclusion> 
 
 
</exclusions> 
</dependency> 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-core</artifactId> 
<version>3.0.5.RELEASE</version> 
<exclusions> 
<!-- Exclude Commons Logging in favor of SLF4j --> 
<exclusion> 
<groupId>commons-logging</groupId> 
<artifactId>commons-logging</artifactId> 
</exclusion> 
</exclusions> 
</dependency> 
 
 
 
 
<dependency> 
<groupId>org.springframework.security</groupId> 
<artifactId>spring-security-config</artifactId> 
<version>3.0.0.RELEASE</version> 
<exclusions> 
<!-- Exclude Commons Logging in favor of SLF4j --> 
<exclusion> 
<groupId>commons-logging</groupId> 
<artifactId>commons-logging</artifactId> 
</exclusion> 
</exclusions> 
</dependency> 
<dependency> 
<groupId>org.springframework.security</groupId> 
<artifactId>spring-security-taglibs</artifactId> 
<version>3.0.5.RELEASE</version> 
<exclusions> 
<!-- Exclude Commons Logging in favor of SLF4j --> 
<exclusion> 
<groupId>commons-logging</groupId> 
<artifactId>commons-logging</artifactId> 
</exclusion> 
</exclusions> 
</dependency> 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-test</artifactId> 
<version>3.0.5.RELEASE</version> 
<exclusions> 
<!-- Exclude Commons Logging in favor of SLF4j --> 
<exclusion> 
<groupId>commons-logging</groupId> 
<artifactId>commons-logging</artifactId> 
</exclusion> 
</exclusions> 
</dependency> 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-oxm</artifactId> 
<version>3.0.5.RELEASE</version> 
<exclusions> 
<!-- Exclude Commons Logging in favor of SLF4j --> 
<exclusion> 
<groupId>commons-logging</groupId> 
<artifactId>commons-logging</artifactId> 
</exclusion> 
</exclusions> 
</dependency> 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-beans</artifactId> 
<version>3.0.5.RELEASE</version> 
<exclusions> 
<!-- Exclude Commons Logging in favor of SLF4j --> 
<exclusion> 
<groupId>commons-logging</groupId> 
<artifactId>commons-logging</artifactId> 
</exclusion> 
</exclusions> 
</dependency> 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-tx</artifactId> 
<version>3.0.5.RELEASE</version> 
</dependency> 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-jdbc</artifactId> 
<version>3.0.5.RELEASE</version> 
</dependency> 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-aop</artifactId> 
<version>3.0.5.RELEASE</version> 
</dependency> 
<dependency> 
<groupId>org.springframework</groupId> 
<artifactId>spring-jms</artifactId> 
<version>3.0.5.RELEASE</version> 
</dependency> 
 
 
<dependency> 
<groupId>com.googlecode.ehcache-spring-annotations</groupId> 
<artifactId>ehcache-spring-annotations</artifactId> 
<version>1.1.2</version> 
</dependency> 
<dependency> 
<groupId>org.aspectj</groupId> 
<artifactId>aspectjrt</artifactId> 
</dependency> 
<dependency> 
<groupId>org.aspectj</groupId> 
<artifactId>aspectjweaver</artifactId> 
</dependency> 
 
 
<dependency> 
    <groupId>com.jcraft</groupId> 
<artifactId>jsch</artifactId> 
<version>0.1.49</version> 
</dependency> 
</dependencies> 
 
/** 
 * $Id$ 
 * @author 
 * Copyright (c) 2010, Disney Enterprises, Inc. 
 */ 
package com.wdpr.nge.api.exceptions; 
 
 
 
 
/** 
 * Exception for Java Runtime Exception 
 *  
 * @author vipinb 
 * 
 */ 
public class JavaRuntimeException extends RuntimeException { 
 
 
 
 
/** 
* @return 
* httpStatus 
*/ 
public String getHttpStatus() { 
return httpStatus; 
} 
 
 
/** 
* @param httpStatus 
* httpStatus 
*/ 
public void setHttpStatus(final String httpStatus) { 
this.httpStatus = httpStatus; 
} 
 
 
/** 
* @return 
* statusCode 
*/ 
public int getStatusCode() { 
return statusCode; 
} 
 
 
/** 
* @param statusCode 
* statusCode 
*/ 
public void setStatusCode(final int statusCode) { 
this.statusCode = statusCode; 
} 
 
 
/** 
* serial uid for serialization 
*/ 
private static final long serialVersionUID = 3112857509153332194L; 
 
 
private int statusCode; 
private String httpStatus; 
 
 
/** 
*  
* @param message 
* message 
* @param statusCode 
* statusCode 
* @param httpStatus 
* httpStatus 
*/ 
public JavaRuntimeException(final String message, final int statusCode, 
final String httpStatus) { 
super(message); 
this.statusCode = statusCode; 
this.httpStatus = httpStatus; 
} 
 
 
/** 
*  
* @param message 
* message 
* @param statusCode 
* statusCode 
*/ 
public JavaRuntimeException(final String message, final int statusCode) { 
super(message); 
this.statusCode = statusCode; 
} 
 
 
} 
 
 
 
 
---- 
 
 
/** 
 * $Id$ 
 * @author  
 * Copyright (c) 2010, Disney Enterprises, Inc. 
 */ 
package com.wdpr.nge.api.exceptions; 
 
 
/** 
 * Exception for service failures 
 *  
 * @author rcochran 
 */ 
public class NgeServiceException extends Exception { 
 
 
    private static final long serialVersionUID = 7645163279806619421L; 
 
 
    private static final int DEFAULT_STATUS_CODE = 500; 
 
 
    private int status = DEFAULT_STATUS_CODE; 
 
 
    /** 
     * Enum of NgeServiceExceptionTypes 
     */ 
    public static enum NgeServiceExceptionType { 
        /** 
         * Not Found Exception Type 
         */ 
        NOT_FOUND_EXCEPTION, 
        /** 
         * Bad Request Type 
         */ 
        BAD_REQUEST, 
        /** 
         * Internal Server Error 
         */ 
        INTERNAL_SERVER_ERROR, 
        /** 
         * 401 Unauthorized 
         */ 
        UNAUTHORIZED, 
        /** 
         * 403 Forbidden 
         */ 
        FORBIDDEN, 
        /** 
         * 409 Conflict 
         */ 
        CONFLICT, 
        /** 
         * 503 Service Unavailable 
         */ 
        SERVICE_UNAVAILABLE; 
 
 
        /** 
         *  
         */ 
 
 
    }; 
 
 
    private NgeServiceExceptionType ngeServiceExceptionType; 
 
 
    /** 
     * A serializable response entity 
     *  
     * @see javax.ws.rs.core.Response 
     */ 
    private Object entity; 
 
 
    /** 
     * Constructs a new NgeServiceException exception with <code>null</code> as 
     * its detail message. The cause is not initialized, and may subsequently be 
     * initialized by a call to {@link #initCause}. 
     */ 
    public NgeServiceException() { 
        super(); 
    } 
 
 
    /** 
     * Constructs a new NgeServiceException exception with <code>null</code> as 
     * its detail message. The cause is not initialized, and may subsequently be 
     * initialized by a call to {@link #initCause}. 
     *  
     * @param entity 
     *            the serializable entity that will be conveyed in the response 
     *            message 
     */ 
    public NgeServiceException(final Object entity) { 
        this(); 
        this.entity = entity; 
    } 
 
 
    /** 
     * Constructs a new NgeServiceException exception with the specified detail 
     * message. The cause is not initialized, and may subsequently be 
     * initialized by a call to {@link #initCause}. 
     *  
     * @param message 
     *            the detail message. The detail message is saved for later 
     *            retrieval by the {@link #getMessage()} method. 
     */ 
    public NgeServiceException(final String message) { 
        super(message); 
        this.entity = message; 
    } 
 
 
    /** 
     * Constructs a new NgeServiceException exception with the specified detail 
     * message and cause. 
     * <p> 
     * Note that the detail message associated with <code>cause</code> is 
     * <i>not</i> automatically incorporated in this NgeServiceException 
     * exception's detail message. 
     *  
     * @param message 
     *            the detail message (which is saved for later retrieval by the 
     *            {@link #getMessage()} method). 
     * @param cause 
     *            the cause (which is saved for later retrieval by the 
     *            {@link #getCause()} method). (A <tt>null</tt> value is 
     *            permitted, and indicates that the cause is nonexistent or 
     *            unknown.) 
     * @since 1.4 
     */ 
    public NgeServiceException(final String message, final Throwable cause) { 
        super(message, cause); 
    } 
 
 
    /** 
     * Constructs a new NgeServiceException exception with the specified cause 
     * and a detail message of <tt>(cause==null ? null : cause.toString())</tt> 
     * (which typically contains the class and detail message of <tt>cause</tt> 
     * ). This constructor is useful for NgeServiceException exceptions that are 
     * little more than wrappers for other throwables. 
     *  
     * @param cause 
     *            the cause (which is saved for later retrieval by the 
     *            {@link #getCause()} method). (A <tt>null</tt> value is 
     *            permitted, and indicates that the cause is nonexistent or 
     *            unknown.) 
     * @since 1.4 
     */ 
    public NgeServiceException(final Throwable cause) { 
        super(cause); 
    } 
 
 
    /** 
     * Constructs a new NgeServiceException exception with the specified cause 
     * and a detail message of <tt>(cause==null ? null : cause.toString())</tt> 
     * (which typically contains the class and detail message of <tt>cause</tt> 
     * ). This constructor is useful for NgeServiceException exceptions that are 
     * little more than wrappers for other throwables. Also initializes the 
     * serializable <tt>entity</tt> that will be expressed to the client as a 
     * message. 
     *  
     * @param cause 
     *            the cause (which is saved for later retrieval by the 
     *            {@link #getCause()} method). (A <tt>null</tt> value is 
     *            permitted, and indicates that the cause is nonexistent or 
     *            unknown.) 
     * @param entity 
     *            serializable response entity 
     * @since 1.4 
     */ 
    public NgeServiceException(final Throwable cause, final Object entity) { 
        this(cause); 
        this.entity = entity; 
    } 
 
 
    private String messageCode; 
 
 
/** 
* @return 
* messageCode 
*/ 
public String getMessageCode() { 
return messageCode; 
} 
 
 
/** 
* @param messageCode 
* messageCode 
*/ 
public void setMessageCode(final String messageCode) { 
this.messageCode = messageCode; 
} 
 
 
/** 
* @param messageCode 
* messageCode 
* @param statusCode 
* the status code 
* @param message 
* the detail message (which is saved for later retrieval by the 
*       {@link #getMessage()} method). 
*/ 
public NgeServiceException(final String messageCode, final int statusCode, final String message) { 
super(message); 
this.status = statusCode; 
this.messageCode = messageCode; 
}  
 
 
    /** 
     * Constructs a new NgeServiceException exception with the specified details 
     * cause, ngeServiceExceptionType and message. 
     *  
     * @param cause 
     *            the cause of erro 
     * @param ngeServiceExceptionType 
     *            the exception type 
     * @param message 
     *            the error message 
     */ 
    public NgeServiceException(final Throwable cause, 
            final NgeServiceExceptionType ngeServiceExceptionType, 
            final String message) { 
        super(message, cause); 
        this.ngeServiceExceptionType = ngeServiceExceptionType; 
    } 
 
 
    /** 
     * Returns the serializable response entity 
     *  
     * @see javax.ws.rs.core.Response 
     * @return entity the object entity 
     */ 
    public Object getEntity() { 
        return entity; 
    } 
 
 
    /** 
     * A serializable response entity 
     *  
     * @see javax.ws.rs.core.Response 
     * @param entity 
     *            the object entity 
     */ 
    public void setEntity(final Object entity) { 
        this.entity = entity; 
    } 
 
 
    /** 
     * @return the status 
     */ 
    public int getStatus() { 
        return status; 
    } 
 
 
    /** 
     * @param status 
     *            the status to set 
     */ 
    public void setStatus(final int status) { 
        this.status = status; 
    } 
 
 
    /** 
     * @return the ngeServiceExceptionType 
     */ 
    public NgeServiceExceptionType getNgeServiceExceptionType() { 
        return ngeServiceExceptionType; 
    } 
} 
 
 
---- 
 
 
/** 
 * $Id$ 
 * @author  
 * Copyright (c) 2010, Disney Enterprises, Inc. 
 */ 
package com.wdpr.nge.api.exceptions; 
 
 
/** 
 * Exception parameters that are in an invalid format 
 *  
 * @author rcochran 
 */ 
public class InvalidFormatException extends NgeServiceException { 
 
 
    private static final int BAD_REQUEST_STATUS_CODE = 400; 
 
 
    /** 
     * serial uid for serialization 
     */ 
    private static final long serialVersionUID = 3112857509153332194L; 
 
 
    /** 
     * @see com.wdpr.nge.api.exceptions.NgeServiceException 
     */ 
    public InvalidFormatException() { 
        super(); 
        super.setStatus(BAD_REQUEST_STATUS_CODE); 
    } 
 
 
    /** 
     * @see com.wdpr.nge.api.exceptions.NgeServiceException 
     * @param entity 
     *            the object 
     */ 
    public InvalidFormatException(final Object entity) { 
        super(entity); 
        super.setStatus(BAD_REQUEST_STATUS_CODE); 
    } 
 
 
    /** 
     * @see com.wdpr.nge.api.exceptions.NgeServiceException 
     * @param message 
     *            the error message 
     * @param cause 
     *            the cause of the error 
     */ 
    public InvalidFormatException(final String message, final Throwable cause) { 
        super(message, cause); 
        super.setStatus(BAD_REQUEST_STATUS_CODE); 
    } 
 
 
    /** 
     * @see com.wdpr.nge.api.exceptions.NgeServiceException 
     * @param message 
     *            the error message 
     */ 
    public InvalidFormatException(final String message) { 
        super(message); 
        super.setStatus(BAD_REQUEST_STATUS_CODE); 
    } 
 
 
    /** 
     * @see com.wdpr.nge.api.exceptions.NgeServiceException 
     * @param cause 
     *            the cause of error 
     * @param entity 
     *            the object 
     */ 
    public InvalidFormatException(final Throwable cause, final Object entity) { 
        super(cause, entity); 
        super.setStatus(BAD_REQUEST_STATUS_CODE); 
    } 
 
 
    /** 
     * @see com.wdpr.nge.api.exceptions.NgeServiceException 
     * @param cause 
     *            the cause of error 
     */ 
    public InvalidFormatException(final Throwable cause) { 
        super(cause); 
        super.setStatus(BAD_REQUEST_STATUS_CODE); 
    } 
 
 
} 
 
 
 
 
<dependency> 
<groupId>com.wdpr.nge.pkg</groupId> 
<artifactId>packaging-api</artifactId> 
<version>15.6.14.44-SNAPSHOT</version> 
<type>jar</type> 
<scope>compile</scope> 
</dependency> 
 